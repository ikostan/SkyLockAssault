---
name: "Browser Functional Tests"

on:  # yamllint disable-line rule:truthy
  workflow_call:  # yamllint disable-line rule:empty-values
    inputs:
      pw_timeout:
        description: "Playwright timeout in ms"
        required: false
        type: "number"
        # Configurable timeout (ms); lower for faster CI
        default: 10000

jobs:
  test:
    runs-on: "ubuntu-latest"
    timeout-minutes: 25
    env:
      PW_TIMEOUT: "${{ inputs.pw_timeout }}"
    steps:
      - uses: "actions/checkout@v4"
      - name: "Export Godot to Web"
        id: "export"
        # yamllint disable rule:line-length
        uses: "firebelley/godot-export@930577654862a320eef793f399ee911b4479efb9"  # Pinned to SHA for security (was @v6.0.0)
        with:
          godot_executable_download_url: "https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_linux.x86_64.zip"
          godot_export_templates_download_url: "https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_export_templates.tpz"
          relative_project_path: "./"  # Project root
          relative_export_path: "./export/web"  # Output folder
          archive_output: true  # Zips for upload (optional; disable if not needed)
          cache: true  # Enable caching for Godot executable and templates
      - name: "List Export Directory Contents"
        run: |
          ls -la export/web
      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.11"
      - name: "Cache PIP Dependencies"
        uses: "actions/cache@v4"
        with:
          path: "~/.cache/pip"
          # Hash for invalidation
          key: "${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install Playwright"
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          pip install playwright pytest-playwright pytest-asyncio
      - name: "Cache Playwright Browsers"
        uses: "actions/cache@v4"
        id: "playwright-cache"  # For conditional install
        with:
          path: "~/.cache/ms-playwright"
          # Key: OS + PW version + deps hash (invalidation on updates)
          key: "${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}-v1.48.0"  # Update version if PW upgrades
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: "Install Playwright Browsers (if cache miss)"
        if: "steps.playwright-cache.outputs.cache-hit != 'true'"  # Skip if cached
        run: "playwright install --with-deps"
      - name: "Start WEB Server"
        run: |
          python -m http.server 8080 --directory export/web &
      - name: "Wait For WEB Server Response"
        # Managed background with readiness check
        run: |
          for i in {1..20}; do  # Readiness loop (up to 10s)
            if curl -f http://localhost:8080/index.html >/dev/null 2>&1; then
              echo "Server ready"
              break
            fi
            sleep 1
          done
          if [ $i -eq 20 ]; then exit 1; fi
      - name: "Run Tests"
        # Generate JUnit XML report with PYTHONPATH adjustment
        run: |
          PYTHONPATH="$PWD/tests:$PYTHONPATH" pytest tests/ -v --junitxml=report.xml
      - name: "Test Report"
        run: |
          if [ -f report.xml ]; then
            total=$(xmllint --xpath 'count(//testcase)' report.xml)
            failures=$(xmllint --xpath 'count(//testcase/failure)' report.xml)
            errors=$(xmllint --xpath 'count(//testcase/error)' report.xml)
            skipped=$(xmllint --xpath 'count(//testcase/skipped)' report.xml)
            passed=$((total - failures - errors - skipped))
            echo "Test Report Summary:"
            echo "- Total tests: $total"
            echo "- Passed: $passed"
            echo "- Failed: $failures"
            echo "- Errors: $errors"
            echo "- Skipped: $skipped"
          else
            echo "No report.xml foundâ€”tests may not have run."
          fi
      - name: "Upload Test Report Artifact"
        if: "always()"  # Even on failure
        uses: "actions/upload-artifact@v4"
        with:
          name: "test-report"
          path: "report.xml"  # XML with pass/fail summary
      - name: "Upload Screenshot Artifact"
        if: "always()"  # Even on failure
        uses: "actions/upload-artifact@v4"
        with:
          name: "test-screenshots"
          path: "main_menu.png"
