---
name: "Browser Functional Tests"

on:  # yamllint disable-line rule:truthy
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        description: "Codecov requires a token to authenticate"
        required: true
    inputs:
      pw_timeout:
        description: "Playwright timeout in ms"
        required: false
        type: "number"
        default: 10000

jobs:
  test:
    runs-on: "ubuntu-latest"
    timeout-minutes: 25
    env:
      PW_TIMEOUT: "${{ inputs.pw_timeout }}"
    steps:
      - uses: "actions/checkout@v5"
      - name: "Export Godot to Web"
        id: "export"
        uses: "firebelley/godot-export@930577654862a320eef793f399ee911b4479efb9"
        with:
          # yamllint disable rule:line-length
          godot_executable_download_url: "https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_linux.x86_64.zip"
          godot_export_templates_download_url: "https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_export_templates.tpz"
          relative_project_path: "./"
          relative_export_path: "./export/web"
          archive_output: true
          cache: true
          # yamllint enable rule:line-length
      - name: "List Export Directory Contents"
        run: |
          ls -la export/web
      - name: "Set up Python"
        uses: "actions/setup-python@v6"
        with:
          python-version: "3.11"
      - name: "Cache PIP Dependencies"
        uses: "actions/cache@v4"
        with:
          path: "~/.cache/pip"
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install Playwright"
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          pip install playwright pytest-playwright pytest-asyncio
      - name: "Cache Playwright Browsers"
        uses: "actions/cache@v4"
        id: "playwright-cache"
        with:
          path: "~/.cache/ms-playwright"
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}-v1.48.0
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: "Install Playwright Browsers (if cache miss)"
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          playwright install --with-deps
      - name: "Start WEB Server"
        run: |
          python -m http.server 8080 --directory export/web &
      - name: "Wait For WEB Server Response"
        run: |
          for i in {1..20}; do
            if curl -f http://localhost:8080/index.html >/dev/null 2>&1; then
              echo "Server ready"
              break
            fi
            sleep 1
          done
          if [ $i -eq 20 ]; then exit 1; fi
      - name: "Run Tests"
        run: |
          PYTHONPATH="$PWD/tests:$PYTHONPATH" pytest tests/ -v --junitxml=junit.xml -o junit_family=legacy
      - name: "List Coverage Reports"
        run: |
          ls -la v8_coverage_*.json || echo "No v8_coverage_*.json found"

      - name: "Set up Node.js for Coverage Conversion"
        uses: "actions/setup-node@v4"
        with:
          node-version: '20'  # Stable for Win10 compat

      - name: "Install Conversion Tools"
        run: |
          npm install v8-to-istanbul nyc

      - name: "Convert V8 to Istanbul and Merge LCOV"
        run: |
          mkdir -p .nyc_output coverage/lcov
          counter=0
          for file in v8_coverage_*.json; do
            node -e "
            const fs = require('fs');
            const path = require('path');
            const V8ToIstanbul = require('v8-to-istanbul');
            const coverage = JSON.parse(fs.readFileSync('$file', 'utf8'));
            (async () => {
              let localCounter = 0;
              for (const entry of coverage) {
                if (!entry.functions || entry.functions.length === 0) {
                  console.log('Skipping entry without functions: ' + (entry.url || 'empty'));
                  continue;
                }
                // Force dummy path for anonymous, use source if available
                const scriptPath = entry.url && entry.url.startsWith('http://localhost:8080/') 
                  ? entry.url.replace('http://localhost:8080/', path.join(process.cwd(), 'export/web/')) 
                  : 'anonymous_' + localCounter + '.js';
                const options = entry.source ? { source: entry.source } : {};
                try {
                  const converter = new V8ToIstanbul(scriptPath, 0, options);
                  await converter.load();
                  converter.applyCoverage(entry.functions);
                  const filename = path.basename(scriptPath) + '_' + (localCounter++) + '.json';
                  fs.writeFileSync(path.join('.nyc_output', filename), JSON.stringify(converter.toIstanbul()));
                } catch (e) {
                  console.error('Skipping entry ' + (entry.url || 'anonymous') + ': ' + e.message);
                }
              }
            })();
            "
            counter=$((counter + 1))
          done
          npx nyc report --reporter=lcov --report-dir coverage/lcov || echo "No coverage data; skipping report"

      - name: "Upload Coverage to Codecov"
        if: ${{ !cancelled() }}
        uses: "codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7"
        with:
          files: ./coverage/lcov/lcov.info  # Now a supported LCOV file
          flags: playwright
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: "Test Report"
        run: |
          if [ -f junit.xml ]; then
            total=$(xmllint --xpath 'count(//testcase)' junit.xml)
            failures=$(xmllint --xpath 'count(//testcase/failure)' junit.xml)
            errors=$(xmllint --xpath 'count(//testcase/error)' junit.xml)
            skipped=$(xmllint --xpath 'count(//testcase/skipped)' junit.xml)
            passed=$((total - failures - errors - skipped))
            echo "Test Report Summary:"
            echo "- Total tests: $total"
            echo "- Passed: $passed"
            echo "- Failed: $failures"
            echo "- Errors: $errors"
            echo "- Skipped: $skipped"
          else
            echo "No junit.xml foundâ€”tests may not have run."
          fi
      - name: "Upload Test Report Artifact"
        if: always()
        uses: "actions/upload-artifact@v5"
        with:
          name: test-report
          path: junit.xml
      - name: "Upload Screenshot and Coverage Artifacts"
        if: always()
        uses: "actions/upload-artifact@v5"
        with:
          name: test-screenshots
          path: |
            main_menu.png
            coverage_*.json
