---
name: "Godot Unit Tests"

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        description: "Codecov requires a token to authenticate"
        required: true

jobs:
  unit-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v5
      - name: "Download Godot Binary"
        run: |
          wget https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_linux.x86_64.zip
          unzip Godot_v4.5-stable_linux.x86_64.zip
          mv Godot_v4.5-stable_linux.x86_64 godot
          chmod +x godot
      - name: "Install GDUnit4"
        run: |
          mkdir -p addons
          wget https://github.com/MikeSchulze/gdUnit4/archive/refs/tags/v6.0.0.zip
          unzip v6.0.0.zip -d addons
          mv addons/gdUnit4-6.0.0/addons/gdUnit4 addons/gdUnit4
          rm -rf addons/gdUnit4-6.0.0
      - name: "Import Resources"
        run: |
          ./godot --headless --path . --import --quit
      - name: "Run GDUnit4 Tests"
        run: |
          ./godot --headless --path . -s res://addons/gdUnit4/bin/GdUnitCmdTool.gd \
            --verbose \
            --ignoreHeadlessMode \
            --add res://test
      - name: "Find Latest Report Directory"
        id: find_report
        run: |
          LATEST_REPORT=$(ls -td reports/report_* | head -1 || echo "")
          if [ -z "$LATEST_REPORT" ]; then
            echo "No report directory found; tests may not have generated reports."
            exit 1
          fi
          echo "latest_report=$LATEST_REPORT" >> $GITHUB_OUTPUT
      - name: "List Coverage Reports"
        run: |
          ls -la ${{ steps.find_report.outputs.latest_report }}/
      - name: "Extract Coverage from HTML (for Codecov)"
        run: |
          pip install beautifulsoup4
          python3 -c "
          from bs4 import BeautifulSoup
          import os
          report_dir = '${{ steps.find_report.outputs.latest_report }}'
          html_path = os.path.join(report_dir, 'index.html')
          if not os.path.exists(html_path):
            print('No index.html; skipping')
            exit(0)
          with open(html_path, 'r') as f:
            soup = BeautifulSoup(f, 'html.parser')
          # Assume table with rows like <tr><td>script.gd</td><td>75%</td></tr> - adjust selectors based on your HTML
          rows = soup.find_all('tr')  # Or specific class/id for coverage table
          lcov_lines = []
          for row in rows[1:]:  # Skip header
            cols = row.find_all('td')
            if len(cols) >= 2:
              file_path = cols[0].text.strip()  # e.g., scripts/weapon.gd
              pct = int(cols[1].text.strip().rstrip('%'))  # e.g., 75
              # Fake LCOV for learning: assume 100 lines, covered = pct/100 * 100
              total_lines = 100  # Placeholder; parse real if in HTML
              covered = int(pct / 100 * total_lines)
              lcov_lines.append(f'TN:{file_path}')
              lcov_lines.append(f'SF:{file_path}')
              lcov_lines.append(f'DA:1,{covered}')  # Simplified; expand for real lines
              lcov_lines.append(f'LF:{total_lines}')
              lcov_lines.append(f'LH:{covered}')
              lcov_lines.append('end_of_record')
          with open('reports/coverage.lcov', 'w') as f:
            f.write('\\n'.join(lcov_lines))
          print('Generated LCOV')
          "
      - name: "Upload Coverage to Codecov"
        if: ${{ !cancelled() }}
        uses: "codecov/codecov-action@v5"
        with:
          files: ./reports/coverage.lcov,./reports/**/*.xml  # LCOV + any JUnit XML
          flags: gdscript
          fail_ci_if_error: false
          verbose: true  # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: "Upload Test Reports Artifacts"
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: gdunit-reports
          path: reports/**
          retention-days: 5
