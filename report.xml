<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="2" time="129.241" timestamp="2025-10-16T06:17:27.000917+00:00" hostname="2c01703482fa"><testcase classname="tests.difficulty_persistence_test" name="test_console_log_presence" time="18.528" /><testcase classname="tests.difficulty_persistence_test" name="test_difficulty_persistence" time="110.126"><failure message="AssertionError: Expected default load log&#10;assert False&#10; +  where False = any(&lt;generator object test_difficulty_persistence.&lt;locals&gt;.&lt;genexpr&gt; at 0x7a183f420c70&gt;)">@pytest.mark.asyncio
    async def test_difficulty_persistence():
        async with async_playwright() as playwright:
            browser = await playwright.chromium.launch(headless=True)
            page = await browser.new_page()
            logs = []
    
            async def handle_console(msg):
                try:
                    log_text = msg.text
                    logs.append(log_text)
                    print(f"Captured log: {log_text}")
                except Exception as e:
                    print(f"Console capture error: {e}")
    
            async def handle_error(msg):
                print(f"Browser error: {msg}")
    
            page.on("console", handle_console)
            page.on("pageerror", handle_error)
    
            try:
                await page.goto("http://localhost:8080/index.html", timeout=60000)
            except Exception as e:
                print(f"Failed to load page: {e}")
                raise
    
            try:
                await page.wait_for_selector("canvas", timeout=30000)
            except Exception as e:
                print(f"Canvas not found: {e}")
                content = await page.content()
                print(f"Page content: {content}")
                await page.screenshot(path="main_menu.png")
                raise
    
            await page.screenshot(path="main_menu.png")
    
            async def wait_for_log_containing(text, timeout=60000):
                start = time.time()
                while time.time() - start &lt; timeout / 1000:
                    if any(text in log for log in logs):
                        print(f"Found log: {text}")
                        return
                    await asyncio.sleep(0.2)
                print(f"Timeout waiting for '{text}'. Logs captured: {logs}")
                canvas = page.locator("canvas")
                box = await canvas.bounding_box()
                if box:
                    print("Canvas detected, proceeding despite log timeout")
                    return
                raise TimeoutError(f"Timeout {timeout}ms exceeded waiting for log containing '{text}'")
    
            try:
                await wait_for_log_containing("Log level set to")
            except TimeoutError as e:
                print(f"Log timeout: {e}")
    
            await page.wait_for_timeout(10000)
    
            canvas = page.locator("canvas")
            box = await canvas.bounding_box()
            click_x = box['x'] + box['width'] * 0.8  # Adjusted to target options button
            click_y = box['y'] + box['height'] * 0.9
            print(f"Clicking at coordinates: ({click_x}, {click_y})")
            await page.mouse.click(click_x, click_y)
    
            await wait_for_log_containing("Instancing options menu", timeout=30000)  # Wait for options menu log
&gt;           assert any("Loaded saved difficulty: 1.0" in log or "No saved settings found" in log for log in logs), "Expected default load log"
E           AssertionError: Expected default load log
E           assert False
E            +  where False = any(&lt;generator object test_difficulty_persistence.&lt;locals&gt;.&lt;genexpr&gt; at 0x7a183f420c70&gt;)

tests/difficulty_persistence_test.py:105: AssertionError</failure></testcase></testsuite></testsuites>